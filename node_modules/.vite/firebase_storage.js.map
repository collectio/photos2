{
  "version": 3,
  "sources": ["../@firebase/storage/src/implementation/constants.ts", "../@firebase/storage/src/implementation/error.ts", "../@firebase/storage/src/platform/browser/base64.ts", "../@firebase/storage/src/implementation/string.ts", "../@firebase/storage/src/implementation/taskenums.ts", "../@firebase/storage/src/implementation/connection.ts", "../@firebase/storage/src/platform/browser/connection.ts", "../@firebase/storage/src/implementation/connectionPool.ts", "../@firebase/storage/src/implementation/location.ts", "../@firebase/storage/src/implementation/failrequest.ts", "../@firebase/storage/src/implementation/backoff.ts", "../@firebase/storage/src/implementation/type.ts", "../@firebase/storage/src/implementation/url.ts", "../@firebase/storage/src/implementation/request.ts", "../@firebase/storage/src/implementation/fs.ts", "../@firebase/storage/src/implementation/blob.ts", "../@firebase/storage/src/implementation/json.ts", "../@firebase/storage/src/implementation/path.ts", "../@firebase/storage/src/implementation/metadata.ts", "../@firebase/storage/src/implementation/list.ts", "../@firebase/storage/src/implementation/requestinfo.ts", "../@firebase/storage/src/implementation/requests.ts", "../@firebase/storage/src/implementation/observer.ts", "../@firebase/storage/src/implementation/async.ts", "../@firebase/storage/src/task.ts", "../@firebase/storage/src/reference.ts", "../@firebase/storage/src/service.ts", "../@firebase/storage/exp/api.ts", "../@firebase/storage/compat/tasksnapshot.ts", "../@firebase/storage/compat/task.ts", "../@firebase/storage/compat/list.ts", "../@firebase/storage/compat/reference.ts", "../@firebase/storage/compat/service.ts", "../@firebase/storage/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n", "import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Network headers\n */\nexport interface Headers {\n  [name: string]: string;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface Connection {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Headers,\n  Connection,\n  ErrorCode\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nexport class XhrConnection implements Connection {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport function newConnection(): Connection {\n  return new XhrConnection();\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { Connection } from './connection';\nimport { newConnection } from '../platform/connection';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class ConnectionPool {\n  createConnection(): Connection {\n    return newConnection();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so \u00AF\\_(\u30C4)_/\u00AF\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string, host: string): string {\n  const protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  const protocol = protocolMatch?.[1];\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, Connection, ErrorCode } from './connection';\nimport { ConnectionPool } from './connectionPool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingConnection_: Connection | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: Connection, p2: string) => T;\n  private errorCallback_:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: ConnectionPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: Connection, p2: string) => T,\n    errorCallback:\n      | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: ConnectionPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = self.pool_.createConnection();\n      self.pendingConnection_ = connection;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then(() => {\n          if (self.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          self.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const connection = status.connection as Connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(\n            connection,\n            connection.getResponseText()\n          );\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  pool: ConnectionPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, Connection } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: Connection, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection } from './connection';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: Connection, p2: string) => Metadata {\n  function handler(xhr: Connection, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: Connection, p2: string) => ListResult {\n  function handler(xhr: Connection, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: Connection, p2: string) => string | null {\n  function handler(xhr: Connection, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getResponseText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: Connection, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo)\n    .then(request => request.getPromise())\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo))\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { ConnectionPool } from './implementation/connectionPool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function useStorageEmulator(\n  storage: StorageService,\n  host: string,\n  port: number\n): void {\n  storage.host = `http://${host}:${port}`;\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   * - protocol://host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _pool: ConnectionPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  get host(): string {\n    return this._host;\n  }\n\n  /**\n   * Set host string for this service.\n   * @param host - host string in the form of host, host:port,\n   * or protocol://host:port\n   */\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<T>(\n    requestInfo: RequestInfo<T>\n  ): Promise<Request<T>> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(requestInfo, authToken, appCheckToken);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _getProvider,\n  FirebaseApp,\n  getApp\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  StorageService as StorageServiceInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  StorageService,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a StorageReference for the given url.\n * @param storage - `StorageService` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): StorageReference;\n/**\n * Returns a StorageReference for the given path in the\n * default bucket.\n * @param storageOrRef - `StorageService` or `StorageReference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: StorageService | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as StorageServiceInternal | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a Firebase StorageService instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get Storage instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A Firebase StorageService instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): StorageService {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot> {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference> {\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport { ref, _Location } from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport {\n  isUrl,\n  StorageService,\n  useStorageEmulator as internalUseEmulator\n} from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<StorageService> {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(host: string, port: number): void {\n    internalUseEmulator(this._delegate, host, port);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { ConnectionPool } from './src/implementation/connectionPool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { StorageService } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(\n      app,\n      authProvider,\n      appCheckProvider,\n      new ConnectionPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n"],
  "mappings": "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",
  "names": []
}
